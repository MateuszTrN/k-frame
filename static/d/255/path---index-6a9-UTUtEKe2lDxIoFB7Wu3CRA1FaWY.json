{"data":{"codeExamples":{"edges":[{"node":{"id":"a-simple-component","code":"const actions = {\n  inc: createAction('inc'),\n};\n\nconst reducer = createReducer({counter: 0}, [\n  createStateReducer(actions.inc, s => ({counter: s.counter + 1})),\n]);\n\nconst Counter = withScope(() => {\n  const {counter, inc} = useKReducer(reducer, actions);\n  return (\n    <div>\n      <button type=\"button\" onClick={inc}>\n        {`clicked ${counter} times`}\n      </button>\n    </div>\n  );\n});\n\nReactDOM.render(\n  <KProvider store={store}>\n    <Counter scope=\"c1\"/>\n  </KProvider>,\n  document.getElementById('counter-example')\n);","mdAbsolutePath":"/Users/krzysztofpniak/reactjs.org/content/home/examples/a-simple-component.md"}},{"node":{"id":"a-stateful-component","code":"const schema = [\n  {id: 'name', title: 'Name'},\n  {id: 'surname', title: 'Surname'}\n];\n\nconst App = () => <div>\n  <Form scope=\"form1\" schema={schema}/>\n</div>;\n\nReactDOM.render(\n  <KProvider store={store}>\n    <App/>\n  </KProvider>,\n  document.getElementById('form-example')\n);","mdAbsolutePath":"/Users/krzysztofpniak/reactjs.org/content/home/examples/a-stateful-component.md"}},{"node":{"id":"an-application","code":"const actions = {\n  setText: createAction('setText'),\n};\n\nconst reducer = createReducer({text: '', items: []}, [\n  createPayloadReducer(actions.setText, p => s => Object.assign({}, s, {text: p})),\n]);\n\nconst TodoApp = () => {\n  const {text, setText, items, addItem} = useKReducer(reducer, actions);\n\n  const handleAdd = useCallback(e => {\n    e.preventDefault();\n    if (!text.length) {\n      return;\n    }\n    const newItem = {\n      text: this.state.text,\n      id: Date.now()\n    };\n    this.setState(state => ({\n      items: state.items.concat(newItem),\n      text: ''\n    }));\n  });\n\n  return (\n    <div>\n      <h3>TODO</h3>\n      <TodoList items={items} />\n      <form onSubmit={addItem}>\n        <label htmlFor=\"new-todo\">\n          What needs to be done?\n        </label>\n        <input\n          id=\"new-todo\"\n          onChange={e => setText(e.target.value)}\n          value={text}\n        />\n        <button>\n          Add #{items.length + 1}\n        </button>\n      </form>\n    </div>\n  );\n};\n\nconst TodoList = ({items}) => {\n\n  return (\n    <ul>\n      {items.map(item => (\n        <li key={item.id}>{item.text}</li>\n      ))}\n    </ul>\n  );\n}\n\nReactDOM.render(\n  <KProvider store={store}>\n    <TodoApp scope=\"todo\"/>\n  </KProvider>,\n  document.getElementById('todos-example')\n);\n","mdAbsolutePath":"/Users/krzysztofpniak/reactjs.org/content/home/examples/an-application.md"}}]},"examples":{"edges":[{"node":{"fileAbsolutePath":"/Users/krzysztofpniak/reactjs.org/content/home/examples/a-simple-component.md","fields":{"slug":"/home/examples/a-simple-component.html"},"frontmatter":{"title":"A Counter Component","domid":"counter-example"},"html":"<p>React components implement a <code class=\"gatsby-code-text\">render()</code> method that takes input data and returns what to display. This example uses an XML-like syntax called JSX. Input data that is passed into the component can be accessed by <code class=\"gatsby-code-text\">render()</code> via <code class=\"gatsby-code-text\">this.props</code>.</p>"}},{"node":{"fileAbsolutePath":"/Users/krzysztofpniak/reactjs.org/content/home/examples/a-stateful-component.md","fields":{"slug":"/home/examples/a-stateful-component.html"},"frontmatter":{"title":"A Form Component","domid":"form-example"},"html":"<p>In addition to taking input data (accessed via <code class=\"gatsby-code-text\">this.props</code>), a component can maintain internal state data (accessed via <code class=\"gatsby-code-text\">this.state</code>). When a component’s state data changes, the rendered markup will be updated by re-invoking <code class=\"gatsby-code-text\">render()</code>.</p>"}},{"node":{"fileAbsolutePath":"/Users/krzysztofpniak/reactjs.org/content/home/examples/an-application.md","fields":{"slug":"/home/examples/an-application.html"},"frontmatter":{"title":"An Application","domid":"todos-example"},"html":"<p>Using <code class=\"gatsby-code-text\">props</code> and <code class=\"gatsby-code-text\">state</code>, we can put together a small Todo application. This example uses <code class=\"gatsby-code-text\">state</code> to track the current list of items as well as the text that the user has entered. Although event handlers appear to be rendered inline, they will be collected and implemented using event delegation.</p>"}}]},"marketing":{"edges":[{"node":{"frontmatter":{"title":"Reusable Redux Components"},"html":"<p>k-frame makes it painless to create composable Redux components.\nCreate components with local state, k-frame attach them to state tree for you.\nNo more complex state composition or huge flat state.\nYou can still use redux in old way.</p>\n<p>Redux dev tool works like it worked before.</p>"}},{"node":{"frontmatter":{"title":"Designed for code Split"},"html":"<p>It is designed to works with code split. Don’t worry about attaching new reducers,\nit’s the task to k-frame to do it for you.</p>\n<p>k-frame works great with react-router and other routing solutions.</p>"}},{"node":{"frontmatter":{"title":"Forms included"},"html":"<p>k-frame has forms built in.</p>"}}]}},"pageContext":{}}